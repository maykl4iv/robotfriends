{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","react_default","a","createElement","className","alt","src","concat","this","props","id","name","email","Component","CardList","_ref","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","CounterButton","updateCount","count","nextProps","nextState","console","log","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearcChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dbc047ff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Card extends Component{\n  render(){\n    return (\n      <div className=\"tc bg-light-green br2 dib pa3 ma2 grow bw2 shadow-5\">\n        <img alt=\"robots\" src={`https://robohash.org/${this.props.id}?150x150`} />\n        <div>\n          <h2>{this.props.name}</h2>\n          <p>{this.props.email}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport Card from './Card';\n\n\nconst CardList = ({robots}) =>{\n    return(\n      <div>\n        {\n          robots.map( (user, i) => {\n            return (\n              <Card\n                key={i}\n                id={robots[i].id}\n                name={robots[i].name}\n                email={robots[i].email}\n              />)\n          })\n        }\n      </div>\n    )\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY : 'scroll', border : '3px solid black', height : '500px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      hasError : false\n    }\n  }\n\n  componentDidCatch(error, info){\n    this.setState({ hasError : true });\n  }\n\n  render(){\n    if(this.state.hasError){\n      return <h1>Ooops something wrong</h1>\n    }else{\n      return this.props.children\n    }\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor(){\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState){\n    if(this.state.count !== nextState){\n      return true;\n    }\n\n    return false;\n  }\n\n  updateCount = () => {\n    this.setState( state => {\n      return {count: state.count + 1}\n    })\n  }\n\n  render(){\n    console.log('CounterButton')\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    )\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState){\n    return false;\n  }\n\n  render(){\n    console.log('Header')\n    return (\n      <div>\n        <h1 className='f1'>RobotFriends</h1>\n        <CounterButton color={'red'}/>\n      </div>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n  return {\n    searchField : state.searchRobots.searchField,\n    robots : state.requestRobots.robots,\n    isPending : state.requestRobots.isPending,\n    error : state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearcChange : (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots : () => dispatch( requestRobots() )\n  }\n}\n\nclass App extends Component{\n\n  componentDidMount(){\n    this.props.onRequestRobots();\n  }\n\n  render(){\n    const { searchField, onSearcChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter( robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ?\n      <h1>Loading</h1> :\n    (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearcChange}/>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots}/>\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect( mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type : CHANGE_SEARCH_FIELD,\n    payload : text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type : REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then( response => response.json() )\n  .then( data => dispatch({ type : REQUEST_ROBOTS_SUCCESS, payload : data }))\n  .catch(error => dispatch({ type : REQUEST_ROBOTS_FAILED, payload : error }))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESSG';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField : ''\n}\n\nexport const searchRobots = ( state=initialStateSearch, action={} ) => {\n  switch(action.type){\n    case CHANGE_SEARCH_FIELD :\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending : false,\n  robots : [],\n  error : ''\n}\n\nexport const requestRobots = ( state=initialStateRobots, action={} ) => {\n  switch(action.type){\n    case REQUEST_ROBOTS_PENDING :\n      return Object.assign({}, state, { isPending : true });\n    case REQUEST_ROBOTS_SUCCESS :\n      return Object.assign({}, state, { robots : action.payload, isPending : false});\n    case REQUEST_ROBOTS_FAILED :\n      return Object.assign({}, state, { error : action.payload, isPending : false});\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore( rootReducer, applyMiddleware( thunkMiddleware, logger) );\n\nReactDOM.render(\n                <Provider store={store}>\n                  <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}